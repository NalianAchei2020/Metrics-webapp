{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/paulf/OneDrive/Desktop/Microverse/Metrics webapp/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/paulf/OneDrive/Desktop/Microverse/Metrics webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';var initialState={countries:[],loading:false,error:null};export var getCountresData=createAsyncThunk('countries/getcountriesData',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response,data,countryData;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch('https://restcountries.com/v3.1/all');case 3:response=_context.sent;_context.next=6;return response.json();case 6:data=_context.sent;countryData=data.map(function(country){return{name:country.name.common,capital:country.capital,continent:country.continents[0],flag:country.flags.png,population:country.population,map:country.maps.googleMaps,area:country.area};});return _context.abrupt(\"return\",countryData);case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);throw new Error(_context.t0);case 14:case\"end\":return _context.stop();}},_callee,null,[[0,11]]);})));var countriesSlice=createSlice({name:'countries',initialState:initialState,reducers:{},extraReducers:function extraReducers(builder){builder.addCase(getCountresData.pending,function(state){state.loading=true;});builder.addCase(getCountresData.fulfilled,function(state,action){state.loading=false;state.countries=action.payload;});builder.addCase(getCountresData.rejected,function(state,action){state.error=action.error.message;});}});export default countriesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","countries","loading","error","getCountresData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","countryData","wrap","_callee$","_context","prev","next","fetch","sent","json","map","country","name","common","capital","continent","continents","flag","flags","png","population","maps","googleMaps","area","abrupt","t0","Error","stop","countriesSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["C:/Users/paulf/OneDrive/Desktop/Microverse/Metrics webapp/src/redux/country/countrySlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  countries: [],\n  loading: false,\n  error: null,\n};\n\nexport const getCountresData = createAsyncThunk(\n  'countries/getcountriesData',\n  async () => {\n    try {\n      const response = await fetch('https://restcountries.com/v3.1/all');\n      const data = await response.json();\n      const countryData = data.map((country) => ({\n        name: country.name.common,\n        capital: country.capital,\n        continent: country.continents[0],\n        flag: country.flags.png,\n        population: country.population,\n        map: country.maps.googleMaps,\n        area: country.area,\n      }));\n      return countryData;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n);\n\nconst countriesSlice = createSlice({\n  name: 'countries',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getCountresData.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(getCountresData.fulfilled, (state, action) => {\n      state.loading = false;\n      state.countries = action.payload;\n    });\n    builder.addCase(getCountresData.rejected, (state, action) => {\n      state.error = action.error.message;\n    });\n  },\n});\n\nexport default countriesSlice.reducer;\n"],"mappings":"8SAAA,OAASA,WAAW,CAAEC,gBAAgB,KAAQ,kBAAkB,CAEhE,GAAM,CAAAC,YAAY,CAAG,CACnBC,SAAS,CAAE,EAAE,CACbC,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IACT,CAAC,CAED,MAAO,IAAM,CAAAC,eAAe,CAAGL,gBAAgB,CAC7C,4BAA4B,cAAAM,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAC5B,SAAAC,QAAA,MAAAC,QAAA,CAAAC,IAAA,CAAAC,WAAA,QAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA,SAE2B,CAAAC,KAAK,CAAC,oCAAoC,CAAC,QAA5DR,QAAQ,CAAAK,QAAA,CAAAI,IAAA,CAAAJ,QAAA,CAAAE,IAAA,SACK,CAAAP,QAAQ,CAACU,IAAI,CAAC,CAAC,QAA5BT,IAAI,CAAAI,QAAA,CAAAI,IAAA,CACJP,WAAW,CAAGD,IAAI,CAACU,GAAG,CAAC,SAACC,OAAO,QAAM,CACzCC,IAAI,CAAED,OAAO,CAACC,IAAI,CAACC,MAAM,CACzBC,OAAO,CAAEH,OAAO,CAACG,OAAO,CACxBC,SAAS,CAAEJ,OAAO,CAACK,UAAU,CAAC,CAAC,CAAC,CAChCC,IAAI,CAAEN,OAAO,CAACO,KAAK,CAACC,GAAG,CACvBC,UAAU,CAAET,OAAO,CAACS,UAAU,CAC9BV,GAAG,CAAEC,OAAO,CAACU,IAAI,CAACC,UAAU,CAC5BC,IAAI,CAAEZ,OAAO,CAACY,IAChB,CAAC,EAAC,CAAC,QAAAnB,QAAA,CAAAoB,MAAA,UACIvB,WAAW,UAAAG,QAAA,CAAAC,IAAA,IAAAD,QAAA,CAAAqB,EAAA,CAAArB,QAAA,kBAEZ,IAAI,CAAAsB,KAAK,CAAAtB,QAAA,CAAAqB,EAAM,CAAC,0BAAArB,QAAA,CAAAuB,IAAA,MAAA7B,OAAA,iBAEzB,EACH,CAAC,CAED,GAAM,CAAA8B,cAAc,CAAGxC,WAAW,CAAC,CACjCwB,IAAI,CAAE,WAAW,CACjBtB,YAAY,CAAZA,YAAY,CACZuC,QAAQ,CAAE,CAAC,CAAC,CACZC,aAAa,CAAE,SAAAA,cAACC,OAAO,CAAK,CAC1BA,OAAO,CAACC,OAAO,CAACtC,eAAe,CAACuC,OAAO,CAAE,SAACC,KAAK,CAAK,CAClDA,KAAK,CAAC1C,OAAO,CAAG,IAAI,CACtB,CAAC,CAAC,CACFuC,OAAO,CAACC,OAAO,CAACtC,eAAe,CAACyC,SAAS,CAAE,SAACD,KAAK,CAAEE,MAAM,CAAK,CAC5DF,KAAK,CAAC1C,OAAO,CAAG,KAAK,CACrB0C,KAAK,CAAC3C,SAAS,CAAG6C,MAAM,CAACC,OAAO,CAClC,CAAC,CAAC,CACFN,OAAO,CAACC,OAAO,CAACtC,eAAe,CAAC4C,QAAQ,CAAE,SAACJ,KAAK,CAAEE,MAAM,CAAK,CAC3DF,KAAK,CAACzC,KAAK,CAAG2C,MAAM,CAAC3C,KAAK,CAAC8C,OAAO,CACpC,CAAC,CAAC,CACJ,CACF,CAAC,CAAC,CAEF,cAAe,CAAAX,cAAc,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}