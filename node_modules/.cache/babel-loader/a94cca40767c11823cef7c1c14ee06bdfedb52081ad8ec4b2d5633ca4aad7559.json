{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  countries: [],\n  loading: false,\n  error: null\n};\nexport const getCountresData = createAsyncThunk('countries/getcountriesData', async () => {\n  try {\n    const response = await fetch('https://restcountries.com/v3.1/all');\n    const data = await response.json();\n    const countryData = data.map(country => ({\n      name: country.name.common,\n      capital: country.capital,\n      continent: country.continents[0],\n      flag: country.flags.png,\n      population: country.population,\n      map: country.maps.googleMaps,\n      area: country.area\n    }));\n    return countryData;\n  } catch (error) {\n    throw new Error(error);\n  }\n});\nconst countriesSlice = createSlice({\n  name: 'countries',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getCountresData.pending, state => {\n      state.loading = true;\n    });\n    builder.addCase(getCountresData.fulfilled, (state, action) => {\n      state.loading = false;\n      state.countries = action.payload;\n    });\n    builder.addCase(getCountresData.rejected, (state, action) => {\n      state.error = action.error.message;\n    });\n  }\n});\nexport default countriesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","countries","loading","error","getCountresData","response","fetch","data","json","countryData","map","country","name","common","capital","continent","continents","flag","flags","png","population","maps","googleMaps","area","Error","countriesSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["C:/Users/paulf/OneDrive/Desktop/Microverse/Metrics webapp/src/redux/country/countrySlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  countries: [],\n  loading: false,\n  error: null,\n};\n\nexport const getCountresData = createAsyncThunk(\n  'countries/getcountriesData',\n  async () => {\n    try {\n      const response = await fetch('https://restcountries.com/v3.1/all');\n      const data = await response.json();\n      const countryData = data.map((country) => ({\n        name: country.name.common,\n        capital: country.capital,\n        continent: country.continents[0],\n        flag: country.flags.png,\n        population: country.population,\n        map: country.maps.googleMaps,\n        area: country.area,\n      }));\n      return countryData;\n    } catch (error) {\n      throw new Error(error);\n    }\n  },\n);\n\nconst countriesSlice = createSlice({\n  name: 'countries',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getCountresData.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(getCountresData.fulfilled, (state, action) => {\n      state.loading = false;\n      state.countries = action.payload;\n    });\n    builder.addCase(getCountresData.rejected, (state, action) => {\n      state.error = action.error.message;\n    });\n  },\n});\n\nexport default countriesSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGL,gBAAgB,CAC7C,4BAA4B,EAC5B,YAAY;EACV,IAAI;IACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;IAClE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,MAAMC,WAAW,GAAGF,IAAI,CAACG,GAAG,CAAEC,OAAO,KAAM;MACzCC,IAAI,EAAED,OAAO,CAACC,IAAI,CAACC,MAAM;MACzBC,OAAO,EAAEH,OAAO,CAACG,OAAO;MACxBC,SAAS,EAAEJ,OAAO,CAACK,UAAU,CAAC,CAAC,CAAC;MAChCC,IAAI,EAAEN,OAAO,CAACO,KAAK,CAACC,GAAG;MACvBC,UAAU,EAAET,OAAO,CAACS,UAAU;MAC9BV,GAAG,EAAEC,OAAO,CAACU,IAAI,CAACC,UAAU;MAC5BC,IAAI,EAAEZ,OAAO,CAACY;IAChB,CAAC,CAAC,CAAC;IACH,OAAOd,WAAW;EACpB,CAAC,CAAC,OAAON,KAAK,EAAE;IACd,MAAM,IAAIqB,KAAK,CAACrB,KAAK,CAAC;EACxB;AACF,CACF,CAAC;AAED,MAAMsB,cAAc,GAAG3B,WAAW,CAAC;EACjCc,IAAI,EAAE,WAAW;EACjBZ,YAAY;EACZ0B,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACzB,eAAe,CAAC0B,OAAO,EAAGC,KAAK,IAAK;MAClDA,KAAK,CAAC7B,OAAO,GAAG,IAAI;IACtB,CAAC,CAAC;IACF0B,OAAO,CAACC,OAAO,CAACzB,eAAe,CAAC4B,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC5DF,KAAK,CAAC7B,OAAO,GAAG,KAAK;MACrB6B,KAAK,CAAC9B,SAAS,GAAGgC,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAACzB,eAAe,CAAC+B,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC3DF,KAAK,CAAC5B,KAAK,GAAG8B,MAAM,CAAC9B,KAAK,CAACiC,OAAO;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAeX,cAAc,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}